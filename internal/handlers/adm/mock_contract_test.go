// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package adm is a generated GoMock package.
package adm

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	staff "github.com/s21platform/staff-service/pkg/staff"
)

// MockStaffService is a mock of StaffService interface.
type MockStaffService struct {
	ctrl     *gomock.Controller
	recorder *MockStaffServiceMockRecorder
}

// MockStaffServiceMockRecorder is the mock recorder for MockStaffService.
type MockStaffServiceMockRecorder struct {
	mock *MockStaffService
}

// NewMockStaffService creates a new mock instance.
func NewMockStaffService(ctrl *gomock.Controller) *MockStaffService {
	mock := &MockStaffService{ctrl: ctrl}
	mock.recorder = &MockStaffServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStaffService) EXPECT() *MockStaffServiceMockRecorder {
	return m.recorder
}

// CreateStaff mocks base method.
func (m *MockStaffService) CreateStaff(r *http.Request) (*staff.Staff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStaff", r)
	ret0, _ := ret[0].(*staff.Staff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStaff indicates an expected call of CreateStaff.
func (mr *MockStaffServiceMockRecorder) CreateStaff(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStaff", reflect.TypeOf((*MockStaffService)(nil).CreateStaff), r)
}

// GetStaff mocks base method.
func (m *MockStaffService) GetStaff(r *http.Request, staffID string) (*staff.Staff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStaff", r, staffID)
	ret0, _ := ret[0].(*staff.Staff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStaff indicates an expected call of GetStaff.
func (mr *MockStaffServiceMockRecorder) GetStaff(r, staffID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStaff", reflect.TypeOf((*MockStaffService)(nil).GetStaff), r, staffID)
}

// ListStaff mocks base method.
func (m *MockStaffService) ListStaff(r *http.Request) (*staff.ListOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStaff", r)
	ret0, _ := ret[0].(*staff.ListOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStaff indicates an expected call of ListStaff.
func (mr *MockStaffServiceMockRecorder) ListStaff(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStaff", reflect.TypeOf((*MockStaffService)(nil).ListStaff), r)
}

// StaffLogin mocks base method.
func (m *MockStaffService) StaffLogin(r *http.Request) (*staff.LoginOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StaffLogin", r)
	ret0, _ := ret[0].(*staff.LoginOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StaffLogin indicates an expected call of StaffLogin.
func (mr *MockStaffServiceMockRecorder) StaffLogin(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StaffLogin", reflect.TypeOf((*MockStaffService)(nil).StaffLogin), r)
}
