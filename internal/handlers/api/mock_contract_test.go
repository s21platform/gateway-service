// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package api is a generated GoMock package.
package api

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	advert_proto "github.com/s21platform/advert-proto/advert-proto"
	avatar_proto "github.com/s21platform/avatar-proto/avatar-proto"
	chat_proto "github.com/s21platform/chat-proto/chat-proto"
	friends_proto "github.com/s21platform/friends-proto/friends-proto"
	model "github.com/s21platform/gateway-service/internal/model"
	notification_proto "github.com/s21platform/notification-proto/notification-proto"
	optionhub_proto "github.com/s21platform/optionhub-proto/optionhub-proto"
	society_proto "github.com/s21platform/society-proto/society-proto"
	user_proto "github.com/s21platform/user-proto/user-proto"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// GetInfoByUUID mocks base method.
func (m *MockUserService) GetInfoByUUID(r *http.Request) (*user_proto.GetUserInfoByUUIDOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfoByUUID", r)
	ret0, _ := ret[0].(*user_proto.GetUserInfoByUUIDOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfoByUUID indicates an expected call of GetInfoByUUID.
func (mr *MockUserServiceMockRecorder) GetInfoByUUID(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfoByUUID", reflect.TypeOf((*MockUserService)(nil).GetInfoByUUID), r)
}

// GetPeerInfo mocks base method.
func (m *MockUserService) GetPeerInfo(r *http.Request) (*user_proto.GetUserInfoByUUIDOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeerInfo", r)
	ret0, _ := ret[0].(*user_proto.GetUserInfoByUUIDOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeerInfo indicates an expected call of GetPeerInfo.
func (mr *MockUserServiceMockRecorder) GetPeerInfo(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeerInfo", reflect.TypeOf((*MockUserService)(nil).GetPeerInfo), r)
}

// UpdateProfileInfo mocks base method.
func (m *MockUserService) UpdateProfileInfo(r *http.Request) (*user_proto.UpdateProfileOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfileInfo", r)
	ret0, _ := ret[0].(*user_proto.UpdateProfileOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfileInfo indicates an expected call of UpdateProfileInfo.
func (mr *MockUserServiceMockRecorder) UpdateProfileInfo(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfileInfo", reflect.TypeOf((*MockUserService)(nil).UpdateProfileInfo), r)
}

// MockAvatarService is a mock of AvatarService interface.
type MockAvatarService struct {
	ctrl     *gomock.Controller
	recorder *MockAvatarServiceMockRecorder
}

// MockAvatarServiceMockRecorder is the mock recorder for MockAvatarService.
type MockAvatarServiceMockRecorder struct {
	mock *MockAvatarService
}

// NewMockAvatarService creates a new mock instance.
func NewMockAvatarService(ctrl *gomock.Controller) *MockAvatarService {
	mock := &MockAvatarService{ctrl: ctrl}
	mock.recorder = &MockAvatarServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvatarService) EXPECT() *MockAvatarServiceMockRecorder {
	return m.recorder
}

// GetSocietyAvatarsList mocks base method.
func (m *MockAvatarService) GetSocietyAvatarsList(r *http.Request) (*avatar_proto.GetAllSocietyAvatarsOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSocietyAvatarsList", r)
	ret0, _ := ret[0].(*avatar_proto.GetAllSocietyAvatarsOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSocietyAvatarsList indicates an expected call of GetSocietyAvatarsList.
func (mr *MockAvatarServiceMockRecorder) GetSocietyAvatarsList(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSocietyAvatarsList", reflect.TypeOf((*MockAvatarService)(nil).GetSocietyAvatarsList), r)
}

// GetUserAvatarsList mocks base method.
func (m *MockAvatarService) GetUserAvatarsList(r *http.Request) (*avatar_proto.GetAllUserAvatarsOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAvatarsList", r)
	ret0, _ := ret[0].(*avatar_proto.GetAllUserAvatarsOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAvatarsList indicates an expected call of GetUserAvatarsList.
func (mr *MockAvatarServiceMockRecorder) GetUserAvatarsList(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAvatarsList", reflect.TypeOf((*MockAvatarService)(nil).GetUserAvatarsList), r)
}

// RemoveSocietyAvatar mocks base method.
func (m *MockAvatarService) RemoveSocietyAvatar(r *http.Request) (*avatar_proto.Avatar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSocietyAvatar", r)
	ret0, _ := ret[0].(*avatar_proto.Avatar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveSocietyAvatar indicates an expected call of RemoveSocietyAvatar.
func (mr *MockAvatarServiceMockRecorder) RemoveSocietyAvatar(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSocietyAvatar", reflect.TypeOf((*MockAvatarService)(nil).RemoveSocietyAvatar), r)
}

// RemoveUserAvatar mocks base method.
func (m *MockAvatarService) RemoveUserAvatar(r *http.Request) (*avatar_proto.Avatar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserAvatar", r)
	ret0, _ := ret[0].(*avatar_proto.Avatar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveUserAvatar indicates an expected call of RemoveUserAvatar.
func (mr *MockAvatarServiceMockRecorder) RemoveUserAvatar(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserAvatar", reflect.TypeOf((*MockAvatarService)(nil).RemoveUserAvatar), r)
}

// UploadSocietyAvatar mocks base method.
func (m *MockAvatarService) UploadSocietyAvatar(r *http.Request) (*avatar_proto.SetSocietyAvatarOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadSocietyAvatar", r)
	ret0, _ := ret[0].(*avatar_proto.SetSocietyAvatarOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadSocietyAvatar indicates an expected call of UploadSocietyAvatar.
func (mr *MockAvatarServiceMockRecorder) UploadSocietyAvatar(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadSocietyAvatar", reflect.TypeOf((*MockAvatarService)(nil).UploadSocietyAvatar), r)
}

// UploadUserAvatar mocks base method.
func (m *MockAvatarService) UploadUserAvatar(r *http.Request) (*avatar_proto.SetUserAvatarOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadUserAvatar", r)
	ret0, _ := ret[0].(*avatar_proto.SetUserAvatarOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadUserAvatar indicates an expected call of UploadUserAvatar.
func (mr *MockAvatarServiceMockRecorder) UploadUserAvatar(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadUserAvatar", reflect.TypeOf((*MockAvatarService)(nil).UploadUserAvatar), r)
}

// MockNotificationService is a mock of NotificationService interface.
type MockNotificationService struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationServiceMockRecorder
}

// MockNotificationServiceMockRecorder is the mock recorder for MockNotificationService.
type MockNotificationServiceMockRecorder struct {
	mock *MockNotificationService
}

// NewMockNotificationService creates a new mock instance.
func NewMockNotificationService(ctrl *gomock.Controller) *MockNotificationService {
	mock := &MockNotificationService{ctrl: ctrl}
	mock.recorder = &MockNotificationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationService) EXPECT() *MockNotificationServiceMockRecorder {
	return m.recorder
}

// GetCountNotification mocks base method.
func (m *MockNotificationService) GetCountNotification(r *http.Request) (*notification_proto.NotificationCountOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountNotification", r)
	ret0, _ := ret[0].(*notification_proto.NotificationCountOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountNotification indicates an expected call of GetCountNotification.
func (mr *MockNotificationServiceMockRecorder) GetCountNotification(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountNotification", reflect.TypeOf((*MockNotificationService)(nil).GetCountNotification), r)
}

// GetNotification mocks base method.
func (m *MockNotificationService) GetNotification(r *http.Request) (*notification_proto.NotificationOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotification", r)
	ret0, _ := ret[0].(*notification_proto.NotificationOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotification indicates an expected call of GetNotification.
func (mr *MockNotificationServiceMockRecorder) GetNotification(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotification", reflect.TypeOf((*MockNotificationService)(nil).GetNotification), r)
}

// MockFriendsService is a mock of FriendsService interface.
type MockFriendsService struct {
	ctrl     *gomock.Controller
	recorder *MockFriendsServiceMockRecorder
}

// MockFriendsServiceMockRecorder is the mock recorder for MockFriendsService.
type MockFriendsServiceMockRecorder struct {
	mock *MockFriendsService
}

// NewMockFriendsService creates a new mock instance.
func NewMockFriendsService(ctrl *gomock.Controller) *MockFriendsService {
	mock := &MockFriendsService{ctrl: ctrl}
	mock.recorder = &MockFriendsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFriendsService) EXPECT() *MockFriendsServiceMockRecorder {
	return m.recorder
}

// CheckSubscribe mocks base method.
func (m *MockFriendsService) CheckSubscribe(r *http.Request) (*model.CheckSubscribe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSubscribe", r)
	ret0, _ := ret[0].(*model.CheckSubscribe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSubscribe indicates an expected call of CheckSubscribe.
func (mr *MockFriendsServiceMockRecorder) CheckSubscribe(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSubscribe", reflect.TypeOf((*MockFriendsService)(nil).CheckSubscribe), r)
}

// GetCountFriends mocks base method.
func (m *MockFriendsService) GetCountFriends(r *http.Request) (*friends_proto.GetCountFriendsOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountFriends", r)
	ret0, _ := ret[0].(*friends_proto.GetCountFriendsOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountFriends indicates an expected call of GetCountFriends.
func (mr *MockFriendsServiceMockRecorder) GetCountFriends(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountFriends", reflect.TypeOf((*MockFriendsService)(nil).GetCountFriends), r)
}

// RemoveFriends mocks base method.
func (m *MockFriendsService) RemoveFriends(r *http.Request) (*friends_proto.RemoveFriendsOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFriends", r)
	ret0, _ := ret[0].(*friends_proto.RemoveFriendsOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFriends indicates an expected call of RemoveFriends.
func (mr *MockFriendsServiceMockRecorder) RemoveFriends(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFriends", reflect.TypeOf((*MockFriendsService)(nil).RemoveFriends), r)
}

// SetFriends mocks base method.
func (m *MockFriendsService) SetFriends(r *http.Request) (*friends_proto.SetFriendsOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFriends", r)
	ret0, _ := ret[0].(*friends_proto.SetFriendsOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetFriends indicates an expected call of SetFriends.
func (mr *MockFriendsServiceMockRecorder) SetFriends(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFriends", reflect.TypeOf((*MockFriendsService)(nil).SetFriends), r)
}

// MockOptionService is a mock of OptionService interface.
type MockOptionService struct {
	ctrl     *gomock.Controller
	recorder *MockOptionServiceMockRecorder
}

// MockOptionServiceMockRecorder is the mock recorder for MockOptionService.
type MockOptionServiceMockRecorder struct {
	mock *MockOptionService
}

// NewMockOptionService creates a new mock instance.
func NewMockOptionService(ctrl *gomock.Controller) *MockOptionService {
	mock := &MockOptionService{ctrl: ctrl}
	mock.recorder = &MockOptionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOptionService) EXPECT() *MockOptionServiceMockRecorder {
	return m.recorder
}

// GetCityList mocks base method.
func (m *MockOptionService) GetCityList(r *http.Request) (*optionhub_proto.GetByNameOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCityList", r)
	ret0, _ := ret[0].(*optionhub_proto.GetByNameOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCityList indicates an expected call of GetCityList.
func (mr *MockOptionServiceMockRecorder) GetCityList(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCityList", reflect.TypeOf((*MockOptionService)(nil).GetCityList), r)
}

// GetHobbyList mocks base method.
func (m *MockOptionService) GetHobbyList(r *http.Request) (*optionhub_proto.GetByNameOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHobbyList", r)
	ret0, _ := ret[0].(*optionhub_proto.GetByNameOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHobbyList indicates an expected call of GetHobbyList.
func (mr *MockOptionServiceMockRecorder) GetHobbyList(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHobbyList", reflect.TypeOf((*MockOptionService)(nil).GetHobbyList), r)
}

// GetOsList mocks base method.
func (m *MockOptionService) GetOsList(r *http.Request) (*model.OptionsStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOsList", r)
	ret0, _ := ret[0].(*model.OptionsStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOsList indicates an expected call of GetOsList.
func (mr *MockOptionServiceMockRecorder) GetOsList(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOsList", reflect.TypeOf((*MockOptionService)(nil).GetOsList), r)
}

// GetSkillList mocks base method.
func (m *MockOptionService) GetSkillList(r *http.Request) (*optionhub_proto.GetByNameOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSkillList", r)
	ret0, _ := ret[0].(*optionhub_proto.GetByNameOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSkillList indicates an expected call of GetSkillList.
func (mr *MockOptionServiceMockRecorder) GetSkillList(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSkillList", reflect.TypeOf((*MockOptionService)(nil).GetSkillList), r)
}

// GetSocietyDirectionList mocks base method.
func (m *MockOptionService) GetSocietyDirectionList(r *http.Request) (*optionhub_proto.GetByNameOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSocietyDirectionList", r)
	ret0, _ := ret[0].(*optionhub_proto.GetByNameOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSocietyDirectionList indicates an expected call of GetSocietyDirectionList.
func (mr *MockOptionServiceMockRecorder) GetSocietyDirectionList(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSocietyDirectionList", reflect.TypeOf((*MockOptionService)(nil).GetSocietyDirectionList), r)
}

// GetStudyPlaceList mocks base method.
func (m *MockOptionService) GetStudyPlaceList(r *http.Request) (*optionhub_proto.GetByNameOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudyPlaceList", r)
	ret0, _ := ret[0].(*optionhub_proto.GetByNameOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudyPlaceList indicates an expected call of GetStudyPlaceList.
func (mr *MockOptionServiceMockRecorder) GetStudyPlaceList(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudyPlaceList", reflect.TypeOf((*MockOptionService)(nil).GetStudyPlaceList), r)
}

// GetWorkPlaceList mocks base method.
func (m *MockOptionService) GetWorkPlaceList(r *http.Request) (*optionhub_proto.GetByNameOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkPlaceList", r)
	ret0, _ := ret[0].(*optionhub_proto.GetByNameOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkPlaceList indicates an expected call of GetWorkPlaceList.
func (mr *MockOptionServiceMockRecorder) GetWorkPlaceList(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkPlaceList", reflect.TypeOf((*MockOptionService)(nil).GetWorkPlaceList), r)
}

// MockSocietyService is a mock of SocietyService interface.
type MockSocietyService struct {
	ctrl     *gomock.Controller
	recorder *MockSocietyServiceMockRecorder
}

// MockSocietyServiceMockRecorder is the mock recorder for MockSocietyService.
type MockSocietyServiceMockRecorder struct {
	mock *MockSocietyService
}

// NewMockSocietyService creates a new mock instance.
func NewMockSocietyService(ctrl *gomock.Controller) *MockSocietyService {
	mock := &MockSocietyService{ctrl: ctrl}
	mock.recorder = &MockSocietyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSocietyService) EXPECT() *MockSocietyServiceMockRecorder {
	return m.recorder
}

// CreateSociety mocks base method.
func (m *MockSocietyService) CreateSociety(r *http.Request) (*society_proto.SetSocietyOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSociety", r)
	ret0, _ := ret[0].(*society_proto.SetSocietyOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSociety indicates an expected call of CreateSociety.
func (mr *MockSocietyServiceMockRecorder) CreateSociety(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSociety", reflect.TypeOf((*MockSocietyService)(nil).CreateSociety), r)
}

// GetSocietyInfo mocks base method.
func (m *MockSocietyService) GetSocietyInfo(r *http.Request) (*society_proto.GetSocietyInfoOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSocietyInfo", r)
	ret0, _ := ret[0].(*society_proto.GetSocietyInfoOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSocietyInfo indicates an expected call of GetSocietyInfo.
func (mr *MockSocietyServiceMockRecorder) GetSocietyInfo(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSocietyInfo", reflect.TypeOf((*MockSocietyService)(nil).GetSocietyInfo), r)
}

// UpdateSociety mocks base method.
func (m *MockSocietyService) UpdateSociety(r *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSociety", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSociety indicates an expected call of UpdateSociety.
func (mr *MockSocietyServiceMockRecorder) UpdateSociety(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSociety", reflect.TypeOf((*MockSocietyService)(nil).UpdateSociety), r)
}

// MockSearchService is a mock of SearchService interface.
type MockSearchService struct {
	ctrl     *gomock.Controller
	recorder *MockSearchServiceMockRecorder
}

// MockSearchServiceMockRecorder is the mock recorder for MockSearchService.
type MockSearchServiceMockRecorder struct {
	mock *MockSearchService
}

// NewMockSearchService creates a new mock instance.
func NewMockSearchService(ctrl *gomock.Controller) *MockSearchService {
	mock := &MockSearchService{ctrl: ctrl}
	mock.recorder = &MockSearchServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchService) EXPECT() *MockSearchServiceMockRecorder {
	return m.recorder
}

// GetSocietyWithLimit mocks base method.
func (m *MockSearchService) GetSocietyWithLimit(r *http.Request) (model.SearchSocietyOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSocietyWithLimit", r)
	ret0, _ := ret[0].(model.SearchSocietyOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSocietyWithLimit indicates an expected call of GetSocietyWithLimit.
func (mr *MockSearchServiceMockRecorder) GetSocietyWithLimit(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSocietyWithLimit", reflect.TypeOf((*MockSearchService)(nil).GetSocietyWithLimit), r)
}

// GetUsersWithLimit mocks base method.
func (m *MockSearchService) GetUsersWithLimit(r *http.Request) (model.SearchUsersOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersWithLimit", r)
	ret0, _ := ret[0].(model.SearchUsersOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersWithLimit indicates an expected call of GetUsersWithLimit.
func (mr *MockSearchServiceMockRecorder) GetUsersWithLimit(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersWithLimit", reflect.TypeOf((*MockSearchService)(nil).GetUsersWithLimit), r)
}

// MockChatService is a mock of ChatService interface.
type MockChatService struct {
	ctrl     *gomock.Controller
	recorder *MockChatServiceMockRecorder
}

// MockChatServiceMockRecorder is the mock recorder for MockChatService.
type MockChatServiceMockRecorder struct {
	mock *MockChatService
}

// NewMockChatService creates a new mock instance.
func NewMockChatService(ctrl *gomock.Controller) *MockChatService {
	mock := &MockChatService{ctrl: ctrl}
	mock.recorder = &MockChatServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatService) EXPECT() *MockChatServiceMockRecorder {
	return m.recorder
}

// CreatePrivateChat mocks base method.
func (m *MockChatService) CreatePrivateChat(r *http.Request) (*chat_proto.CreatePrivateChatOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrivateChat", r)
	ret0, _ := ret[0].(*chat_proto.CreatePrivateChatOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePrivateChat indicates an expected call of CreatePrivateChat.
func (mr *MockChatServiceMockRecorder) CreatePrivateChat(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrivateChat", reflect.TypeOf((*MockChatService)(nil).CreatePrivateChat), r)
}

// GetPrivateRecentMessages mocks base method.
func (m *MockChatService) GetPrivateRecentMessages(r *http.Request) (*chat_proto.GetPrivateRecentMessagesOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateRecentMessages", r)
	ret0, _ := ret[0].(*chat_proto.GetPrivateRecentMessagesOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateRecentMessages indicates an expected call of GetPrivateRecentMessages.
func (mr *MockChatServiceMockRecorder) GetPrivateRecentMessages(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateRecentMessages", reflect.TypeOf((*MockChatService)(nil).GetPrivateRecentMessages), r)
}

// MockAdvertService is a mock of AdvertService interface.
type MockAdvertService struct {
	ctrl     *gomock.Controller
	recorder *MockAdvertServiceMockRecorder
}

// MockAdvertServiceMockRecorder is the mock recorder for MockAdvertService.
type MockAdvertServiceMockRecorder struct {
	mock *MockAdvertService
}

// NewMockAdvertService creates a new mock instance.
func NewMockAdvertService(ctrl *gomock.Controller) *MockAdvertService {
	mock := &MockAdvertService{ctrl: ctrl}
	mock.recorder = &MockAdvertServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdvertService) EXPECT() *MockAdvertServiceMockRecorder {
	return m.recorder
}

// CreateAdvert mocks base method.
func (m *MockAdvertService) CreateAdvert(r *http.Request) (*advert_proto.AdvertEmpty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdvert", r)
	ret0, _ := ret[0].(*advert_proto.AdvertEmpty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdvert indicates an expected call of CreateAdvert.
func (mr *MockAdvertServiceMockRecorder) CreateAdvert(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdvert", reflect.TypeOf((*MockAdvertService)(nil).CreateAdvert), r)
}

// GetAdverts mocks base method.
func (m *MockAdvertService) GetAdverts(r *http.Request) (*advert_proto.GetAdvertsOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdverts", r)
	ret0, _ := ret[0].(*advert_proto.GetAdvertsOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdverts indicates an expected call of GetAdverts.
func (mr *MockAdvertServiceMockRecorder) GetAdverts(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdverts", reflect.TypeOf((*MockAdvertService)(nil).GetAdverts), r)
}
